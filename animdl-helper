#!/bin/sh

# Script that uses ani_cli history file but uses animdl to play the anime.
# Made to be used if ani_cli goes down.

# ╭──────────────────────────────────────────────────────────╮
# │ User Variables                                           │
# ╰──────────────────────────────────────────────────────────╯

use_external_menu=1
use_trackma=1
track="anilist" # Use 'anilist' to track anilist to 'mal' to track myanimelist.
rofi_config="${HOME}/.config/rofi/ani-cli.rasi"
animdl="${HOME}/.local/bin/animdl"
animdl_provider="animepahe" # allanime, animepahe, animeout, gogoanime, zoro

# ╭──────────────────────────────────────────────────────────╮
# │ Non-user Variables                                       │
# ╰──────────────────────────────────────────────────────────╯

hist_dir="${ANI_CLI_HIST_DIR:-${XDG_STATE_HOME:-${HOME}/.local/state}/ani-cli}"
[ ! -d "${hist_dir}" ] && mkdir -p "${hist_dir}"

histfile="${hist_dir}/ani-hsts"
[ ! -f "${histfile}" ] && : >"${histfile}"

trackmafile="${XDG_STATE_HOME:-${HOME}/.local/state}/ani-cli/ani-trackma-${track}"
[ ! -f "${trackmafile}" ] && : >"${trackmafile}"

# ╭──────────────────────────────────────────────────────────╮
# │ Functions                                                │
# ╰──────────────────────────────────────────────────────────╯

external_menu() {
    if [ -f "${rofi_config}" ]; then
        rofi "$1" -theme "${rofi_config}" -sort -dmenu -i -p "$2"
    else
        rofi "$1" -sort -dmenu -i -width 1500 -p "$2"
    fi
}

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

launcher() {
    [ "${use_external_menu}" = "0" ] && [ -z "$1" ] && set -- "+m" "$2"
    [ "${use_external_menu}" = "0" ] && fzf "$1" --reverse --cycle --prompt "$2"
    [ "${use_external_menu}" = "1" ] && external_menu "$1" "$2"
}

nth() {
    stdin=$(cat -)
    [ -z "${stdin}" ] && return 1
    line_count="$(printf "%s\n" "${stdin}" | wc -l | tr -d "[:space:]")"
    [ "${line_count}" -eq 1 ] && printf "%s" "${stdin}" | cut -f2,3 && return 0
    prompt="$1"
    multi_flag=""
    [ $# -ne 1 ] && shift && multi_flag="$1"
    line=$(printf "%s" "${stdin}" | cut -f1,3 | tr '\t' ' ' | launcher "${multi_flag}" "${prompt}" | cut -d " " -f 1)
    [ -n "${line}" ] && printf "%s" "${stdin}" | grep -E '^'"${line}"'($|\s)' | cut -f2,3 || exit 1
}

update_history() {
    if grep -q -- "${id}" "${histfile}"; then
        sed -E "s/^[^\t]+\t${id}\t/${episode}\t${id}\t/" "${histfile}" >"${histfile}.new"
        mv "${histfile}.new" "${histfile}"
    fi
}

play() {
    "${animdl}" stream "${animdl_provider}:${anime}" -r "${episode}"
}

# ╭──────────────────────────────────────────────────────────╮
# │ Trackma                                                  │
# ╰──────────────────────────────────────────────────────────╯

trackma_accounts() {
    if printf "q" | trackma | grep -q "No accounts."; then
        die "Accounts have not been added to trackma. Please type 'trackma' in terminal and follow instructions to add anilist or myanimelist account."
    elif [ "$1" = "anilist" ]; then
        trackma_account_no=$(printf "q" | trackma - | grep "anilist" | cut -d: -f1)
        [ -z "${trackma_account_no}" ] && die "Anilist account not found in trackma. Please add it or change 'track' variable to 'mal' to track myanimelist instead."
    elif [ "$1" = "mal" ]; then
        trackma_account_no=$(printf "q" | trackma - | grep "mal" | cut -d: -f1)
        [ -z "${trackma_account_no}" ] && die "Myanimelist account not found in trackma. Please add it or change 'track' variable to 'anilist' to track anilist instead."
    fi
}

trackma_update() {
    trackma -a "${trackma_account_no}" update "$1" "$2"
    trackma -a "${trackma_account_no}" send
}

# Collects the anime from your watching or plan to watch list to autoselect the anime to track.
# If the anime is neither in your watching nor in your plan to watch list, the script will prompt you to add the anime first.
watching_animes_from_anilist() {
    printf "filter watching\nlist\nfilter rewatching\nlist\nfilter plantowatch\nlist\nexit" | COLUMNS=130 trackma -a "${trackma_account_no}" | grep "^|" | sed "
		s/\x1b//g
		s/^|[[:space:]]*[0-9]*[[:space:]]*//g
		s:[|/0-9\? ]*$::g
		s/\.*$//g
		s/\[0m$//g
		s/^[[;0-9]*m//g " >/tmp/trackma-cli.txt
}

# ╭──────────────────────────────────────────────────────────╮
# │ Read History                                             │
# ╰──────────────────────────────────────────────────────────╯

chosen_anime=$(awk -F'\t' '{printf "%s\t%s\n", $1, $3}' <"${histfile}" | cut -d"(" -f1 | launcher "" "Select Anime")
[ -z "${chosen_anime}" ] && die "No unwatched series in history!"
episode=$(echo "${chosen_anime}" | cut -f1)
episode=$((episode + 1))
anime=$(echo "${chosen_anime}" | cut -f2 | xargs)
id=$(grep "${anime}" "${histfile}" | cut -f2)

# ╭──────────────────────────────────────────────────────────╮
# │ Get Trackma Id                                           │
# ╰──────────────────────────────────────────────────────────╯

# While updating Anilist/ Mal using trackma, we need to use the name of the anime present in Anilist/Mal. Hence the need for trackmafile
if [ "${use_trackma}" -eq 1 ]; then
    trackma_accounts "${track}"
    trackma_id=$(grep "${id}" "${trackmafile}" | cut -f2)

    if [ -z "${trackma_id}" ]; then
        # Look if the anime is already added to the anilist
        watching_animes_from_anilist
        selection_id=$(echo "${anime}" | cut -d" " -f1)
        anime_name=$(grep -i "${selection_id}" /tmp/trackma-cli.txt)

        if [ -n "${anime_name}" ]; then
            no_of_results=$(echo "${anime_name}" | wc -l)
            [ "${no_of_results}" -gt 1 ] && anime_name=$(printf "%s" "${anime_name}" | nth "Select one:")
            REPLY=$(printf "Yes\nNo" | nth "${anime_name} was auto-selected from your list. Is this correct?")
            [ "${REPLY}" = "No" ] && anime_name=$(nth "Select an anime: (If anime not found, add it to anilist first)" </tmp/trackma-cli.txt)
        fi

        # If the anime was not already added to list, ask the user if they want to add it. Only works in terminal.
        if [ -z "${anime_name}" ]; then
            [ "${use_external_menu}" -eq 1 ] && die "${anime} not found in your ${track}. Run ani-cli in terminal to add it."
            REPLY=$(printf "%s\nCancel" "${anime}" | external_menu "" "Anime not found in your ${track}. Choose/Type the anime to add.")
            case "${REPLY}" in
                "Cancel" | "")
                    printf "\33[2K\r\033[1;31m%s\033[0m\n" "No anime selected" >&2
                    die "Please add the anime you want to watch in ${track} before continuing or disable ${track} syncing."
                    ;;
                *)
                    search_title=$(printf "%s" "${REPLY}" | nth "Select anime to add to ${track}")
                    trackma -a "${trackma_account_no}" add "${search_title}"
                    watching_animes_from_anilist
                    selection_id=$(echo "${anime}" | cut -d" " -f1)
                    anime_name=$(grep -i "${selection_id}" /tmp/trackma-cli.txt)
                    ;;
            esac
        fi

        # If the anime is found/added to list, then proceed with that anime.
        if [ -n "${anime_name}" ]; then
            printf "%s\t%s\n" "${id}" "${anime_name}" >>"${trackmafile}"
            trackma_id=$(grep "${id}" "${trackmafile}" | cut -f2)
        else
            die "Please add the anime you want to watch in ${track} before continuing or disable ${track} syncing."
        fi
    fi
fi

# ╭──────────────────────────────────────────────────────────╮
# │ Play Episode                                             │
# ╰──────────────────────────────────────────────────────────╯

play
while cmd=$(printf "update_next\nnext\nprevious\nreplay\nchange_provider\nupdate_quit\nquit" | nth "Playing episode ${episode} of ${anime}... "); do
    case "${cmd}" in
        "previous") episode=$((episode - 1)) 2>/dev/null ;;
        "replay") ;;
        "change_provider")
            animdl_provider=$(printf "allanime\nanimepahe\nanimeout\ngogoanime\nzoro" | nth "Select a provider: ")
            ;;
        "update_next")
            [ "${use_trackma}" -eq 1 ] && trackma_update "${trackma_id}" "${episode}"
            update_history
            episode=$((episode + 1))
            ;;
        "next") episode=$((episode + 1)) 2>/dev/null ;;
        "update_quit")
            [ "${use_trackma}" -eq 1 ] && trackma_update "${trackma_id}" "${episode}"
            update_history
            exit 0
            ;;
        *) exit 0 ;;
    esac
    play
done
